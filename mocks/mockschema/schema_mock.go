// Code generated by MockGen. DO NOT EDIT.
// Source: schema.go

// Package mockschema is a generated GoMock package.
package mockschema

import (
	context "context"
	reflect "reflect"

	schema "github.com/effective-security/xdb/schema"
	gomock "github.com/golang/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// ListForeignKeys mocks base method.
func (m *MockProvider) ListForeignKeys(ctx context.Context, schemaName string, tableNames []string) (schema.ForeignKeys, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForeignKeys", ctx, schemaName, tableNames)
	ret0, _ := ret[0].(schema.ForeignKeys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForeignKeys indicates an expected call of ListForeignKeys.
func (mr *MockProviderMockRecorder) ListForeignKeys(ctx, schemaName, tableNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForeignKeys", reflect.TypeOf((*MockProvider)(nil).ListForeignKeys), ctx, schemaName, tableNames)
}

// ListTables mocks base method.
func (m *MockProvider) ListTables(ctx context.Context, schemaName string, tableNames []string, withDependencies bool) (schema.Tables, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTables", ctx, schemaName, tableNames, withDependencies)
	ret0, _ := ret[0].(schema.Tables)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTables indicates an expected call of ListTables.
func (mr *MockProviderMockRecorder) ListTables(ctx, schemaName, tableNames, withDependencies any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTables", reflect.TypeOf((*MockProvider)(nil).ListTables), ctx, schemaName, tableNames, withDependencies)
}

// ListViews mocks base method.
func (m *MockProvider) ListViews(ctx context.Context, schemaName string, tableNames []string) (schema.Tables, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListViews", ctx, schemaName, tableNames)
	ret0, _ := ret[0].(schema.Tables)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListViews indicates an expected call of ListViews.
func (mr *MockProviderMockRecorder) ListViews(ctx, schemaName, tableNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListViews", reflect.TypeOf((*MockProvider)(nil).ListViews), ctx, schemaName, tableNames)
}
